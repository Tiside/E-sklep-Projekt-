// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//Do .ENV:
//
//DATABASE_URL="mysql://root@localhost:3306/e-sklep"
//
// KOMENDY
// npm install bcrypt
// npx prisma migrate dev
// npm install gsap




generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



// id narazie tak bo nie umiem prismy
model ListaProduktow {
    id Int @unique
    marka String
    src String
    ilosc Int
    cena Int
    likes  Likes[]
}

model Users {
    id            String    @id @default(cuid())
    name          String    @unique
    email         String?   @unique
    password      String
    likes  Likes[]
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// // Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

model Likes {
    id String @id @default(cuid())
    userId String
    productId Int

    users Users @relation(fields: [userId], references:[id])
    listaProduktow ListaProduktow @relation(fields: [productId], references:[id])

    @@unique([userId, productId])
}
